<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/halo"
			   xmlns:views="*"
			   creationComplete="onCreationComplete()"
			   backgroundColor="0x000000"
			   frameRate="30">

	<fx:Script>
		<![CDATA[
			import com.assetviews.AssetManager;
			import com.assetviews.BitmapView;
			import com.assetviews.IAnimation;
			import com.pinocchio.AssetsDef;
			import flash.events.Event;
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import spark.events.IndexChangeEvent;
			
			/**
			 * creationComplete event handler
			 */
			private function onCreationComplete():void
			{
				_animationContainer = new UIComponent();
				animationView.addElement(_animationContainer);
				_spriteContainer = new UIComponent();
				spriteView.addElement(_spriteContainer);
				AssetManager.instance.initialize(AssetsDef.ANIMATIONS, AssetsDef.SPRITES);
				
				animationList.dataProvider = getAssetCollection(AssetsDef.ANIMATIONS);
				_animationContainer.width = animationWidthInput.max = animationView.width;
				_animationContainer.height = animationHeightInput.max = animationView.height;
				animationWidthInput.stepper.addEventListener(Event.CHANGE, onAnimationWidthChanged);
				animationHeightInput.stepper.addEventListener(Event.CHANGE, onAnimationHeightChanged);
				
				spriteList.dataProvider = getAssetCollection(AssetsDef.SPRITES);
				_spriteContainer.width = spriteWidthInput.max = spriteView.width;
				_spriteContainer.height = spriteHeightInput.max = spriteView.height;
				spriteWidthInput.stepper.addEventListener(Event.CHANGE, onSpriteWidthChanged);
				spriteHeightInput.stepper.addEventListener(Event.CHANGE, onSpriteHeightChanged);
			}
			
			/* Animations */
			
			/**
			 * Clear the animation view
			 */
			private function clearAnimation():void
			{
				animationNameList.dataProvider = null;
				if (null != _currentAnimation)
				{
					_currentAnimation.stopAnimation();
					_animationContainer.removeChild(_currentAnimation.displayObject);
					_currentAnimation = null;
				}
			}
			
			/**
			 * AnimationName list change event handler
			 * @param	evt
			 */
			private function animationNameChangedHandler(evt:IndexChangeEvent):void
			{
				var animationName:String = animationNameList.dataProvider.getItemAt(evt.newIndex) as String;
				_currentAnimation.playAnimation(animationName);
				animationWidthInput.value = _currentAnimation.width;
				animationHeightInput.value = _currentAnimation.height;
			}
			
			/**
			 * Animation list change event handler
			 * @param	evt
			 */
			private function animationChangedHandler(evt:IndexChangeEvent):void
			{
				var name:String = animationList.dataProvider.getItemAt(evt.newIndex) as String;
				clearAnimation();
				_currentAnimation = AssetManager.instance.getAnimation(name);
				animationNameList.dataProvider = new ArrayCollection(_currentAnimation.animationNames);
				_animationContainer.addChild(_currentAnimation.displayObject);
			}
			
			private function onAnimationWidthChanged(event:Event):void
			{
				if (null != _currentAnimation)
				{
					_currentAnimation.width = animationWidthInput.value;
				}
			}
			
			private function onAnimationHeightChanged(event:Event):void
			{
				if (null != _currentAnimation)
				{
					_currentAnimation.height = animationHeightInput.value;
				}
			}
			
			/* Sprites */
			
			/**
			 * Clear the sprite view
			 */
			private function clearSprite():void
			{
				if (null != _currentSprite)
				{
					_spriteContainer.removeChild(_currentSprite.displayObject);
					_currentSprite = null;
				}
			}
			
			/**
			 * Sprite list change event handler
			 * @param	evt
			 */
			private function spriteChangedHandler(evt:IndexChangeEvent):void
			{
				var name:String = spriteList.dataProvider.getItemAt(evt.newIndex) as String;
				clearSprite();
				_currentSprite = AssetManager.instance.getSprite(name);
				_spriteContainer.addChild(_currentSprite.displayObject);
				spriteWidthInput.value = _currentSprite.width;
				spriteHeightInput.value = _currentSprite.height;
			}
			
			private function onSpriteWidthChanged(event:Event):void
			{
				if (null != _currentSprite)
				{
					_currentSprite.width = spriteWidthInput.value;
				}
			}
			
			private function onSpriteHeightChanged(event:Event):void
			{
				if (null != _currentSprite)
				{
					_currentSprite.height = spriteHeightInput.value;
				}
			}
			
			/**
			 * @param	assets
			 * @return the asset names as an ArrayCollection
			 */
			private function getAssetCollection(assets:Object):ArrayCollection
			{
				var collection:ArrayCollection = new ArrayCollection();
				for (var name:String in assets)
				{
					collection.addItem(name);
				}
				return collection;
			}
			
			private var _animationContainer:UIComponent;
			private var _currentAnimation:IAnimation;
			private var _spriteContainer:UIComponent;
			private var _currentSprite:BitmapView;
		]]>
	</fx:Script>

	<s:VGroup height="100%" width="100%">
		<s:HGroup width="100%"
				  height="50%">
			<s:List id="animationList"
					alternatingItemColors="[#FFFFFF, #CCCCCC]"
					change="animationChangedHandler(event);"
					labelField="name"
					height="100%" />
			<s:List id="animationNameList"
					visible="{-1 != animationList.selectedIndex}"
					alternatingItemColors="[#FFFFFF, #CCCCCC]"
					change="animationNameChangedHandler(event);"
					height="100%" />
			<s:BorderContainer backgroundColor="white"
							   visible="{-1 != animationNameList.selectedIndex}"
							   height="100%">
				<s:VGroup paddingTop="8" paddingBottom="8" paddingLeft="8" paddingRight="8">
					<views:NumberInput id="animationWidthInput"
									   title="Width" />
					<views:NumberInput id="animationHeightInput"
									   title="Height" />
				</s:VGroup>
			</s:BorderContainer>
			<s:Group id="animationView"  width="100%" height="100%" />
		</s:HGroup>
		<s:HGroup width="100%"
				  height="50%">
			<s:List id="spriteList"
					alternatingItemColors="[#FFFFFF, #CCCCCC]"
					change="spriteChangedHandler(event);"
					labelField="name"
					height="100%" />
			<s:BorderContainer backgroundColor="white"
						       visible="{-1 != spriteList.selectedIndex}"
							   height="100%">
				<s:VGroup paddingTop="8" paddingBottom="8" paddingLeft="8" paddingRight="8">
					<views:NumberInput id="spriteWidthInput"
									   title="Width" />
					<views:NumberInput id="spriteHeightInput"
									   title="Height"/>
				</s:VGroup>
			</s:BorderContainer>
			<s:Group id="spriteView" width="100%" height="100%" />
		</s:HGroup>
	</s:VGroup>

</s:Application>
